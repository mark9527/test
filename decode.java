package com.hsbc.rbwm.digital.amh.error.feign;
import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;
import com.hsbc.rbwm.digital.amh.base.LoggingUtil;import com.hsbc.rbwm.digital.amh.error.exception.OthersException;import com.hsbc.rbwm.digital.amh.error.systemapi.SystemApiError;
import com.fasterxml.jackson.databind.ObjectMapper;
import feign.Response;import feign.codec.ErrorDecoder;
@Servicepublic class SystemApiErrorDecoder implements ErrorDecoder {    private static final String CLASSNAME = SystemApiErrorDecoder.class.getName();    private static final SystemApiError EMPTY_ERROR = new SystemApiError();    private ObjectMapper objectMapper;
    @Autowired    public SystemApiErrorDecoder(final ObjectMapper objectMapper) {        this.objectMapper = objectMapper;    }
    public Exception decode(final String methodKey, final Response response) {        final String METHODNAME = "decode";        LoggingUtil.logEntry(SystemApiErrorDecoder.CLASSNAME, METHODNAME, methodKey, response);
        if (response.status() == 999) {            return otherException(response);        }
        int status = response.status();        SystemApiError error;        try {            error = this.convertApiError(response);        } catch (Exception e) {            // TODO Auto-generated catch block            return e;        }        Exception exception = ExceptionBuilder.buildException(methodKey, error, status);        LoggingUtil.logExit(SystemApiErrorDecoder.CLASSNAME, METHODNAME, exception);        return exception;
    }
    private Exception otherException(final Response response) {        final String METHODNAME = "otherException";        LoggingUtil.logEntry(SystemApiErrorDecoder.CLASSNAME, METHODNAME, response);        OthersException error = null;        if (response.body().length() <= 0) {            return new OthersException("no message");        } else {            try {                error = this.objectMapper.readValue(response.body().asInputStream(), OthersException.class);            } catch (IOException e) {                // TODO Auto-generated catch block                e.printStackTrace();            }        }        LoggingUtil.logExit(SystemApiErrorDecoder.CLASSNAME, METHODNAME, error);        return error;    }
    private SystemApiError convertApiError(final Response response) {        final String METHODNAME = "convertApiError";        LoggingUtil.logEntry(SystemApiErrorDecoder.CLASSNAME, METHODNAME, response);        SystemApiError error = null;        if (response.body().length() <= 0) {            error = SystemApiErrorDecoder.EMPTY_ERROR;        } else {            try {                error = this.objectMapper.readValue(response.body().asInputStream(), SystemApiError.class);            } catch (IOException e) {                LoggingUtil.logError(SystemApiErrorDecoder.CLASSNAME, METHODNAME, "Unable to read error body", (Throwable) e);                error = SystemApiErrorDecoder.EMPTY_ERROR;            }        }        LoggingUtil.logExit(SystemApiErrorDecoder.CLASSNAME, METHODNAME, error);        return error;    }
}
